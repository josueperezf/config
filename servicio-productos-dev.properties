#agregamos la configuracion de base de datos mysql base de datos java_microservice, allowPublicKeyRetrieval=true es para solucionar posibles errores de key
#para este proyecto cree un contenedor mysql 8, al cual le asigne el puerto de acceso desde fuera de docker 3307, para herramientas como DbVisualizer etc
#y el puerto de acceso dentro de docker que es el 3306, en pocas palabras si queremos acceder al contenedor mysql desde dentro de docker se utiliza el puerto 3306, si es desde fuera el 3307,
#esto lo hice por si necesito abrir xampp o algo asi, entonces para no tener problema, este microservicio productos, apunta al puerto 3306 debido a que este contenedor estara dentro de docker y en la misma red llamada mi-red

spring.datasource.url=jdbc:mysql://contenedor-mysql8:3306/java_microservice?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=America/Santiago
spring.datasource.username=root
spring.datasource.password=1234
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
#las siguientes dos lineas son solo para DESARROLLO, NO PARA PRODUCCION, CREATE SOLO CREA LAS TABLAS, create-drop Crea las tablas y al bajar el servicio elimina las tablas, update crea la tabla solo una vez y las tablas se mantienen sin importan que se baje el servicio, hace altertable por si agregamos algun campo
#create y create-drop es solo de desarrollo, update, podria ser para produccion, pero ya depende del programador
spring.jpa.hibernate.ddl-auto=create
logging.level.org.hibernate.SQL=debug
